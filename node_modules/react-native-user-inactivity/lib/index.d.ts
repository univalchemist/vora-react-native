import * as React from 'react';
import { StyleProp, ViewStyle } from 'react-native';
export interface UserInactivityProps {
    timeForInactivity?: number;
    children: React.ReactNode;
    style: StyleProp<ViewStyle>;
    onAction: (active: boolean) => void;
}
interface State {
    active: boolean;
}
export default class UserInactivity extends React.PureComponent<UserInactivityProps, State> {
    static defaultProps: {
        style: {
            flex: number;
        };
        timeForInactivity: number;
    };
    state: {
        active: boolean;
    };
    private panResponder;
    private timeout;
    private clearTimer;
    componentWillMount(): void;
    componentWillUnmount(): void;
    /**
     * This method is called whenever a touch is detected. If no touch is
     * detected after `this.props.timeForInactivity` milliseconds, then
     * `this.state.inactive` turns to true.
     */
    handleInactivity: () => void;
    /**
     * If more than `this.props.timeForInactivity` milliseconds have passed
     * from the latest touch event, then the current state is set to `inactive`
     * and the `this.props.onInactivity` callback is dispatched.
     */
    timeoutHandler: () => void;
    resetTimeout: () => void;
    onShouldSetPanResponderCapture: () => boolean;
    render(): JSX.Element;
}
export {};
